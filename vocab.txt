--------------------------------------------------------------------------------
COMMANDS:

git add <file-name>
	- add all changes to the given file to the staging area

git branch
	- view a list of currently existing branches

git branch <branch-name>
	- create a new branch label referring to the current commit

git branch -d <branch-name>
	- deletes a branch's label
	- won't delete the commits in a branch UNLESS you haven't merged it to any
	  other branch

git checkout <branch-name>
	- takes you to a branch

git checkout <commit-id>
	- resetting all of your files to how they were at the time that commit was
	  made

git clone
	- takes an existing repository and makes a new one just like it

git commit
	- save the current contents of the staging area as a new commit

git diff
	- compare the contents of the working directory to the contents of the
	  staging area

git diff <commit-1> <commit-2>
	- takes 2 commit ids as input and outputs the difference between them

git init
	- create a new Git repository in the current directory

git log
	- shows the commits in the repository prior to the current commit

git log --graph --oneline
	- shows a visualization of the branches

git merge <branch-1> <branch-2>
	- create a combined version of two branches that contains all the content
	  from both

git push <remote-name> <local-branch>
	- 

git show <commit-id>
	- show you what changes were introduced by a commit compared to its parent
	- can see the diff between the commit and its parent without knowing exactly
	  what the parent was

git status
	- print information about the current repository, including whether any
	  changes have been made since the last commit

--------------------------------------------------------------------------------
VOCABULARY:

repository
	- collection of files that are tracked by git as a cohesive unit

staging area
	- the files that you want to commit
	- you can add files to the staging area using 'git add'

working directory
	- the directory you are located in

--------------------------------------------------------------------------------
ERRORS AND WARNINGS:

Should not be doing an octopus
	- Octopus is a strategy Git uses to combine many different versions of code
	together. This message can appear if you try to use this strategy in an
	inappropriate situation.

You are in 'detached HEAD' state
	- HEAD is what Git calls the commit you are currently on. You can “detach”
	the HEAD by switching to a previous commit, which we’ll see in the next
	video. Despite what it sounds like, it’s actually not a bad thing to detach
	the HEAD. Git just warns you so that you’ll realize you’re doing it.

Panic! (the 'impossible' happened)
	- This is a real error message, but it’s not output by Git. Instead it’s
	output by GHC, the compiler for a programming language called Haskell. It’s
	reserved for particularly surprising errors!


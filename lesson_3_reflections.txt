--------------------------------------------------------------------------------

1) When would you want to use a remote repository rather than keeping all your
work local?

- multiple people are working on the same repository
- you work on the same repository on your work and home computers

--------------------------------------------------------------------------------

2) Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

- in case there are updated files on Github that you have updated differently,
  you need to be able to handle those conflicts properly

--------------------------------------------------------------------------------

3) Describe the differences between forks, clones, and branches. When would you
use one instead of another?

- branches are specific to a repo
- clones are clones of a repo either locally or remotely
- forks are clones of a repo that give credit to the original person

- use branches to help organize prototypes and stages of projects
    - ex: a development, experimental and master branch for a project
- clone an existing repo to your local machine so that you can work on it
- fork an existing repo that's not your own so that you can give the original
  owner credit

--------------------------------------------------------------------------------

4) What is the benefit of having a copy of the last known state of the remote
stored locally?

So that when you are working offline you can immediately check how your branch
compares to the state of the remote.

--------------------------------------------------------------------------------

5) How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

We could use a similar system where you have a central location for the "Master
Branch". Then we could use email to notify the other team members when we wanted
to update the Master Branch. They could give us feedback and we could update it
once everyone agreed on the changes. I can't think of what would be easier, but
it would definitely be harder to stay organized. Email is already cluttered and
what happens we don't remember the changes we made previously? Version control
would definitely be difficult.

--------------------------------------------------------------------------------

6) When would you want to make changes in a separate branch rather than directly
in master? What benefits does each approach have?

If you are testing a new feature or maybe trying multiple approaches to the same
problem it makes sense to have separate branches. The master should be your
final product after you determine how to implement a feature or solve a problem.

--------------------------------------------------------------------------------

